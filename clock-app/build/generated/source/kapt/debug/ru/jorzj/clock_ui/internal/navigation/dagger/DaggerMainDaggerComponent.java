// Generated by Dagger (https://dagger.dev).
package ru.jorzj.clock_ui.internal.navigation.dagger;

import android.content.Context;
import com.arkivanov.decompose.router.stack.StackNavigation;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import ru.jorzj.clock_ui.internal.dagger.AppModule;
import ru.jorzj.clock_ui.internal.dagger.Config;
import ru.jorzj.clock_ui.internal.dagger.MainDaggerComponent;
import ru.jorzj.clock_ui.internal.dagger.Router;
import ru.jorzj.clock_ui.internal.data.local.AvailableTimeZonesRepositoryImpl_Factory;
import ru.jorzj.clock_ui.internal.data.local.KeyValueStorage;
import ru.jorzj.clock_ui.internal.data.local.KeyValueStorage_Factory;
import ru.jorzj.clock_ui.internal.data.local.TimeRepositoryImpl;
import ru.jorzj.clock_ui.internal.data.local.TimeRepositoryImpl_Factory;
import ru.jorzj.clock_ui.internal.data.local.TimeZoneRepositoryImpl;
import ru.jorzj.clock_ui.internal.data.local.TimeZoneRepositoryImpl_Factory;
import ru.jorzj.domain.GetListTimeZones;
import ru.jorzj.clock_ui.internal.domain.GetListTimeZones_Factory;
import ru.jorzj.domain.GetTime;
import ru.jorzj.clock_ui.internal.domain.GetTime_Factory;
import ru.jorzj.domain.SaveTimeZone;
import ru.jorzj.clock_ui.internal.domain.SaveTimeZone_Factory;
import ru.jorzj.clock_ui.internal.component.CurrentComponentImpl;
import ru.jorzj.clock_ui.internal.navigation.CurrentComponentImpl_Factory;
import ru.jorzj.clock_ui.internal.navigation.CurrentComponentImpl_Factory_Impl;
import ru.jorzj.clock_ui.internal.component.HostComponent;
import ru.jorzj.clock_ui.internal.component.HostComponentImpl;
import ru.jorzj.clock_ui.internal.navigation.HostComponentImpl_Factory;
import ru.jorzj.clock_ui.internal.navigation.HostComponentImpl_Factory_Impl;
import ru.jorzj.clock_ui.internal.component.ListComponentImpl;
import ru.jorzj.clock_ui.internal.navigation.ListComponentImpl_Factory;
import ru.jorzj.clock_ui.internal.navigation.ListComponentImpl_Factory_Impl;
import ru.jorzj.network.api.TimeApi;
import ru.jorzj.network.internal.NetworkModule;
import ru.jorzj.network.internal.NetworkModule_ProvideOkHttpClientFactory;
import ru.jorzj.network.internal.NetworkModule_ProvideRetrofitFactory;
import ru.jorzj.network.internal.NetworkModule_ProvidesTimeApiFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerMainDaggerComponent {
  private DaggerMainDaggerComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private NetworkModule networkModule;

    private AppModule appModule;

    private Builder() {
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public MainDaggerComponent build() {
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      return new MainDaggerComponentImpl(networkModule, appModule);
    }
  }

  private static final class MainDaggerComponentImpl implements MainDaggerComponent {
    private final MainDaggerComponentImpl mainDaggerComponentImpl = this;

    private Provider<GetListTimeZones> getListTimeZonesProvider;

    private Provider<Context> provideContextProvider;

    private Provider<KeyValueStorage> keyValueStorageProvider;

    private Provider<TimeZoneRepositoryImpl> timeZoneRepositoryImplProvider;

    private Provider<SaveTimeZone> saveTimeZoneProvider;

    private Provider<StackNavigation<Config>> bindNavigationStackProvider;

    private Provider<Router> routerProvider;

    private ListComponentImpl_Factory listComponentImplProvider;

    private Provider<ListComponentImpl.Factory> factoryProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<TimeApi> providesTimeApiProvider;

    private Provider<TimeRepositoryImpl> timeRepositoryImplProvider;

    private Provider<GetTime> getTimeProvider;

    private CurrentComponentImpl_Factory currentComponentImplProvider;

    private Provider<CurrentComponentImpl.Factory> factoryProvider2;

    private HostComponentImpl_Factory hostComponentImplProvider;

    private Provider<HostComponentImpl.Factory> factoryProvider3;

    private MainDaggerComponentImpl(NetworkModule networkModuleParam, AppModule appModuleParam) {

      initialize(networkModuleParam, appModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final NetworkModule networkModuleParam,
        final AppModule appModuleParam) {
      this.getListTimeZonesProvider = GetListTimeZones_Factory.create(((Provider) AvailableTimeZonesRepositoryImpl_Factory.create()));
      this.provideContextProvider = AppModule_ProvideContextFactory.create(appModuleParam);
      this.keyValueStorageProvider = KeyValueStorage_Factory.create(provideContextProvider);
      this.timeZoneRepositoryImplProvider = TimeZoneRepositoryImpl_Factory.create(keyValueStorageProvider);
      this.saveTimeZoneProvider = SaveTimeZone_Factory.create(((Provider) timeZoneRepositoryImplProvider));
      this.bindNavigationStackProvider = DoubleCheck.provider((Provider) ClockStackNavigation_Factory.create());
      this.routerProvider = Router_Factory.create(bindNavigationStackProvider);
      this.listComponentImplProvider = ListComponentImpl_Factory.create(getListTimeZonesProvider, saveTimeZoneProvider, routerProvider);
      this.factoryProvider = ListComponentImpl_Factory_Impl.create(listComponentImplProvider);
      this.provideOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideOkHttpClientFactory.create(networkModuleParam));
      this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(networkModuleParam, provideOkHttpClientProvider));
      this.providesTimeApiProvider = DoubleCheck.provider(NetworkModule_ProvidesTimeApiFactory.create(networkModuleParam, provideRetrofitProvider));
      this.timeRepositoryImplProvider = TimeRepositoryImpl_Factory.create(providesTimeApiProvider);
      this.getTimeProvider = GetTime_Factory.create(((Provider) timeRepositoryImplProvider), ((Provider) timeZoneRepositoryImplProvider));
      this.currentComponentImplProvider = CurrentComponentImpl_Factory.create(routerProvider, getTimeProvider);
      this.factoryProvider2 = CurrentComponentImpl_Factory_Impl.create(currentComponentImplProvider);
      this.hostComponentImplProvider = HostComponentImpl_Factory.create(((Provider) factoryProvider), ((Provider) factoryProvider2), bindNavigationStackProvider);
      this.factoryProvider3 = HostComponentImpl_Factory_Impl.create(hostComponentImplProvider);
    }

    @Override
    public HostComponent.Factory getRootComponentFactory() {
      return factoryProvider3.get();
    }
  }
}
